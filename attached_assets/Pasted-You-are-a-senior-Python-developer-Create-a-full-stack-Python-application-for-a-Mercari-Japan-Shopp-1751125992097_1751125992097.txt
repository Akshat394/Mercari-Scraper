You are a senior Python developer. Create a full-stack Python application for a "Mercari Japan Shopping Assistant" using Streamlit for the UI and Python for the backend logic. The system should allow users to ask in English or Japanese for items to buy on Mercari Japan, and return the top 3 product recommendations with reasons.

Requirements:
- *Natural Language Understanding:* Accept a user question (in English or Japanese) about a desired product. Use an LLM (GPT-4 or Claude 3.5 Sonnet) with function/tool calling to interpret the query. Extract product keywords, price range, condition, etc. Define a parsing function (e.g. extract_filters) that returns this structured info.
- *Translation:* If the query is in English, translate key terms into Japanese to create an effective search query. You may use the LLM or a translation library for this.
- *Data Retrieval:* Use a scraping function (requests + BeautifulSoup, or simulated with sample data) to search Mercari Japan. For simulation, use static sample HTML or JSON of Mercari search results. Extract each item's name, price, condition, and seller rating. Store results in a list of dictionaries.
- *Ranking Logic:* Implement logic to score and rank products based on relevance, price, condition, and rating. Remove duplicates if necessary.
- *LLM Recommendation:* Define a function/tool (e.g. recommend_products) that takes the top candidates and the user query, and calls the LLM to produce a concise recommendation message. The LLM should output the top 3 items with reasons. Ensure the language of the response matches the user’s language.
- *Streamlit UI:* Build a chat-like interface. Use st.chat_input() for user messages and st.chat_message() to display messages. When the user submits a question, show their query in the chat, call the backend functions, then display the assistant’s answer with recommended items. Include a progress spinner while waiting for results.
- *Multilingual Support:* Allow queries in English or Japanese. Provide UI text (like button labels or placeholders) in the appropriate language. Handle translation so that if the user inputs English, the system searches in Japanese but responds in English, and vice versa.
- *Modular Code:* Structure code so that the core logic (parsing, searching, ranking) is separated from the Streamlit app file. Include an optional API module if needed.
- *Comments & Documentation:* Comment your code to explain each step. Prepare a requirements.txt and a brief README.md describing setup and usage.

Ensure the final app is complete and runnable. Start by setting up the project structure, then implement each component step by step.